name: Build and release

on:
  push:
    tags:
      - '*'

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: ${{ steps.get_tag.outputs.tag }}
          body: |
            Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and upload
    needs: create-release
    runs-on: ubuntu-latest
    permissions: write-all

    strategy:
      matrix:
        os: [windows, linux, darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build Compiler
        run: docker build --build-arg OS=${{ matrix.os }} -t ${{ matrix.os }}-builder .

      - name: Build amd64 Binaries
        run: docker run --rm -v ./bin:/home/app/bin -e TAG=${{ steps.get_tag.outputs.tag }} ${{ matrix.os }}-builder

      - name: Compress amd64 binaries
        run: |
          if [ "${{ matrix.os }}" == "windows" ]; then
            sudo zip -r ./bin/stay_active-${{ steps.get_tag.outputs.tag }}.${{ matrix.os }}-amd64.zip ./bin/stay_active-${{ steps.get_tag.outputs.tag }}.${{ matrix.os }}-amd64.exe
          else
            sudo tar -czvf ./bin/stay_active-${{ steps.get_tag.outputs.tag }}.${{ matrix.os }}-amd64.tar.gz ./bin/stay_active-${{ steps.get_tag.outputs.tag }}.${{ matrix.os }}-amd64.bin
          fi

      - name: Upload amd64 binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/stay_active-${{ steps.get_tag.outputs.tag }}.${{ matrix.os }}-amd64.${{ matrix.os == 'windows' && 'zip' || 'tar.gz' }}
          asset_name: stay_active-${{ steps.get_tag.outputs.tag }}.${{ matrix.os }}-amd64.${{ matrix.os == 'windows' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows' && 'application/zip' || 'application/gzip' }}
